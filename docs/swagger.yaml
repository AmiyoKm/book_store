basePath: /api/v1
definitions:
  main.OrderItemPayload:
    properties:
      book_id:
        minimum: 1
        type: integer
      price:
        type: number
      quantity:
        minimum: 1
        type: integer
    required:
    - book_id
    - price
    - quantity
    type: object
  main.PasswordResetVerifyResponse:
    properties:
      message:
        type: string
      user_id:
        type: string
    type: object
  main.TokenResponse:
    properties:
      token:
        type: string
    type: object
  main.UserWithToken:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/store.User'
    type: object
  main.createBookPayload:
    properties:
      author:
        maxLength: 255
        type: string
      cover_image_url:
        type: string
      description:
        maxLength: 1000
        type: string
      isbn:
        type: string
      pages:
        maximum: 100000
        minimum: 1
        type: integer
      price:
        maximum: 100000
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 255
        type: string
    required:
    - author
    - isbn
    - price
    - stock
    - title
    type: object
  main.createOrderPayload:
    properties:
      items:
        items:
          $ref: '#/definitions/main.OrderItemPayload'
        type: array
      payment_method:
        enum:
        - cash_on_delivery
        - Bkash
        - credit_card
        type: string
      shipping_address:
        minLength: 5
        type: string
      total_amount:
        type: number
    required:
    - items
    - payment_method
    - shipping_address
    - total_amount
    type: object
  main.createUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
      role:
        enum:
        - user
        - moderator
        - admin
        type: string
      username:
        maxLength: 255
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.loginUserPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  main.passwordResetPayload:
    properties:
      new_password:
        minLength: 5
        type: string
      token:
        type: string
      user_id:
        type: integer
    required:
    - new_password
    - token
    - user_id
    type: object
  main.passwordResetRequestPayload:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  main.passwordResetResponse:
    properties:
      message:
        type: string
    type: object
  main.updateBookPayload:
    properties:
      author:
        maxLength: 50
        type: string
      cover_image_url:
        type: string
      description:
        maxLength: 1000
        type: string
      isbn:
        type: string
      pages:
        maximum: 100000
        minimum: 1
        type: integer
      price:
        maximum: 100000
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 50
        type: string
    type: object
  main.updateOrderAdminPayload:
    properties:
      payment_method:
        enum:
        - cash_on_delivery
        - Bkash
        - credit_card
        type: string
      shipping_address:
        minLength: 1
        type: string
      status:
        enum:
        - pending
        - processing
        - shipped
        - delivered
        - cancelled
        - returned
        - failed
        - refunded
        type: string
    type: object
  main.updateOrderPayload:
    properties:
      shipping_address:
        minLength: 1
        type: string
    type: object
  store.Book:
    properties:
      author:
        type: string
      cover_image_url:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      isbn:
        type: string
      pages:
        type: integer
      price:
        type: number
      stock:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      version:
        type: integer
    type: object
  store.Order:
    properties:
      id:
        type: integer
      order_items:
        items:
          $ref: '#/definitions/store.OrderItem'
        type: array
      payment_method:
        type: string
      placed_at:
        type: string
      shipping_address:
        type: string
      status:
        type: string
      total_amount:
        type: number
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  store.OrderItem:
    properties:
      book_id:
        type: integer
      id:
        type: integer
      order_id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
    type: object
  store.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for BookBound .
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: BookBound API
paths:
  /admin/orders/{id}:
    patch:
      consumes:
      - application/json
      description: Update an order by Admin
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Order Payload by Admin
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.updateOrderAdminPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Updated Order
          schema:
            $ref: '#/definitions/store.Order'
        "400":
          description: Invalid request
          schema: {}
        "500":
          description: Server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update an order by Admin
      tags:
      - order
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.loginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.createUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /books:
    post:
      consumes:
      - application/json
      description: Creates a book
      parameters:
      - description: Book details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.createBookPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Book created
          schema:
            $ref: '#/definitions/store.Book'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a book
      tags:
      - book
  /books/{id}:
    get:
      consumes:
      - application/json
      description: Get a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Get Book '
          schema:
            $ref: '#/definitions/store.Book'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get a book
      tags:
      - book
    patch:
      consumes:
      - application/json
      description: Update a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Book Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.updateBookPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Book'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update a book
      tags:
      - book
  /books/search:
    get:
      consumes:
      - application/json
      description: Search for books using a general query or specific filters such
        as title, author, tags, price range, and stock status.
      parameters:
      - description: Free-text search query
        in: query
        name: query
        type: string
      - description: Filter by book title
        in: query
        name: title
        type: string
      - description: Filter by author name
        in: query
        name: author
        type: string
      - collectionFormat: csv
        description: Filter by tags
        in: query
        items:
          type: string
        name: tag
        type: array
      - description: Minimum price filter
        in: query
        name: min_price
        type: number
      - description: Maximum price filter
        in: query
        name: max_price
        type: number
      - description: Filter by stock status (true for in-stock, false for out-of-stock)
        in: query
        name: in_stock
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Book'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Search books
      tags:
      - book
  /books{id}:
    delete:
      consumes:
      - application/json
      description: deletes a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Book deleted
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: deletes a book
      tags:
      - book
  /orders:
    post:
      consumes:
      - application/json
      description: Create an order
      parameters:
      - description: Create Order Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.createOrderPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Creates an order
          schema:
            $ref: '#/definitions/store.Order'
        "400":
          description: Invalid request
          schema: {}
        "500":
          description: Server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create an order
      tags:
      - order
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get a order by its ID
      parameters:
      - description: order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get Order
          schema:
            $ref: '#/definitions/store.Order'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get a order
      tags:
      - order
    patch:
      consumes:
      - application/json
      description: Update an order by User
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Order Payload by User
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.updateOrderPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Updated Order
          schema:
            $ref: '#/definitions/store.Order'
        "400":
          description: Invalid request
          schema: {}
        "500":
          description: Server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update an order by User
      tags:
      - order
  /password/request/verify:
    get:
      consumes:
      - application/json
      description: Verifies the password reset request sent by the email
      parameters:
      - description: Password reset token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Reset Password Request Response
          schema:
            $ref: '#/definitions/main.PasswordResetVerifyResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Verify the password reset request
      tags:
      - password
  /password/reset:
    post:
      consumes:
      - application/json
      description: Reset the password
      parameters:
      - description: Reset Password Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.passwordResetPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Reset Password Request Response
          schema:
            $ref: '#/definitions/main.passwordResetResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Reset the password
      tags:
      - password
  /password/reset-request:
    post:
      consumes:
      - application/json
      description: Send a Reset Password Request by sending a mail to the user
      parameters:
      - description: Password Reset Request Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.passwordResetRequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Reset Password Request Response
          schema:
            $ref: '#/definitions/main.TokenResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Send Reset Password Request
      tags:
      - password
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
